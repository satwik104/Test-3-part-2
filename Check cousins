// Following is the Binary Tree node structure
/**************
class BinaryTreeNode {
    public : 
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data) {
        this -> data = data;
        left = NULL;
        right = NULL;
    }
};
***************/
/********************************************************************************************

      1. they cant have same parent
      2.to be cousins they must be on same hight/level
      3.we want cousins not siblings so if isSibling return true aur final ans is false
*******************************************************************************************/
/*
int hight(BinaryTreeNode<int> *root, int x)
{
    if(root==NULL)
        return 0;
    if(root->data == x)
        return 1;
    int left_hight = hight(root->left,x);
    //now after coming from left if recursion foud the x then it will return some number except -1
    //otherwise -1 that means we didÃ©nt find x on left side so we go to right 
    if(left_hight!=-1)
        return 1+left_hight;
    else
    {
        int right_hight = hight(root->right,x);
        if(right_hight!=-1)
            return 1+right_hight;
        else
            return 0;//means wee dident find x anywhere
    }
}
bool isSibling(BinaryTreeNode<int> *root, int p, int q)
{
    if(root==NULL)
        return false;
    if(root->left!=NULL && root->right!=NULL)
    {
        if(root->left->data == p && root->right->data == q)
            return true;
        else if(root->left->data==q&&root->right->data==p)
            return true;
        else
            return isSibling(root->left,p,q)||isSibling(root->right,p,q);
    }
    if(root->right!=NULL)
        return isSibling(root->right,p,q);
     else
        return isSibling(root->left,p,q);
    
}
//we want cousins not siblings so if isSibling return true aur final ans is false
bool isCousin(BinaryTreeNode<int> *root, int p, int q) {
    return (hight(root,p)==hight(root,q)) && (!isSibling(root,p,q));
}*/
/////////////////////////////*******************FIRST SEE COMMENTS IN ABOVE CODE ITS USEFUL...SOME LITTLE BUG IT IT***********/////
int depth(BinaryTreeNode<int> *root,int node)
{
    if(root==NULL)
        return -1;
    if(node==root->data)
        return 0;
    int left=depth(root->left,node);
    if(left!=-1)
        return 1+left;
    else{
           int right=depth(root->right,node);
if(right!=-1)
    return 1+right;
        else 
            return -1;
 
    }
}
bool isSibling(BinaryTreeNode<int> *root, int p, int q) {
    // Write your code here
if(root==NULL)
    return false;
    if(root->left!=NULL&&root->right!=NULL)
    {
        if(root->left->data==p&&root->right->data==q)
            return true;
         else if(root->left->data==q&&root->right->data==p)
            return true;
        else
            return isSibling(root->left,p,q)||isSibling(root->right,p,q);
        
    }
    if(root->right!=NULL)
    {
        return isSibling(root->right,p,q);
    }
    else
        return isSibling(root->left,p,q);
}
bool isCousin(BinaryTreeNode<int> *root, int p, int q)
{
    if(root==NULL)
        return false;
    return ((depth(root,p)==depth(root,q))&&(!isSibling(root,p,q)));
    
}
